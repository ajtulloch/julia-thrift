#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING


module StatisticsServer

using Thrift
import Thrift.process, Thrift.meta, Thrift.distribute




export meta
export StatisticsEvent # struct
export StatisticsServerProcessor, StatisticsServerClient, StatisticsServerClientBase, appendEvent # service StatisticsServer

include("StatisticsServer_constants.jl")
include("StatisticsServer_types.jl")
include("StatisticsServer_impl.jl")  # server methods to be hand coded
include("StatisticsServer.jl")


end # module StatisticsServer
], Int[0], Dict{Symbol,Any}())



# Processor for StatisticsServer service (to be used in server implementation)
type StatisticsServerProcessor <: TProcessor
  tp::ThriftProcessor
  function StatisticsServerProcessor()
    p = new(ThriftProcessor())
    handle(p.tp, ThriftHandler("appendEvent", _appendEvent, appendEvent_args, appendEvent_result))
    p
  end
  _appendEvent(inp::appendEvent_args) = appendEvent_result(appendEvent(inp.event))
end # type StatisticsServerProcessor
process(p::StatisticsServerProcessor, inp::TProtocol, outp::TProtocol) = process(p.tp, inp, outp)
distribute(p::StatisticsServerProcessor) = distribute(p.tp)


# Server side methods to be defined by user:
# function appendEvent(event::StatisticsEvent)
#     # returns StatisticsEvent


# Client implementation for StatisticsServer service
type StatisticsServerClient <: StatisticsServerClientBase
  p::TProtocol
  seqid::Int32
  StatisticsServerClient(p::TProtocol) = new(p, 0)
end # type StatisticsServerClient

# Client callable method for appendEvent
function appendEvent(c::StatisticsServerClientBase, event::StatisticsEvent)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  writeMessageBegin(p, "appendEvent", MessageType.CALL, c.seqid)
  inp = appendEvent_args()
  set_field(inp, :event, event)
  write(p, inp)
  writeMessageEnd(p)
  flush(p.t)
  
  (fname, mtype, rseqid) = readMessageBegin(p)
  (mtype == MessageType.EXCEPTION) && throw(read(p, TSTRUCT, TApplicationException()))
  outp = read(p, TSTRUCT, appendEvent_result())
  readMessageEnd(p)
  (rseqid != c.seqid) && throw(TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  has_field(outp, :success) && (return get_field(outp, :success))
  throw(TApplicationException(ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function appendEvent

